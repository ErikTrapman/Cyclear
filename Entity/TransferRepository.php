<?php

namespace Cyclear\GameBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RennerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransferRepository extends EntityRepository
{

    public function findByRenner(Renner $renner, $seizoen = null)
    {
        if (null === $seizoen) {
            $seizoen = $this->_em->getRepository("CyclearGameBundle:Seizoen")->getCurrent();
        }

        $qb = $this->getQueryBuilderForRenner($renner, $seizoen);
        $qb->andWhere('t.seizoen = ?2');
        $qb->setParameter("2", $seizoen);
        $qb->orderBy('t.id', 'DESC');
        return $qb->getQuery()->getResult();
    }

    public function findLastByRenner(Renner $renner)
    {
        $qb = $this->getQueryBuilderForRenner($renner);
        $qb->orderBy('t.id', 'DESC');
        $qb->setMaxResults(1);
        $res = $qb->getQuery()->getResult();
        return ( array_key_exists(0, $res) ) ? $res[0] : null;
    }

    private function getQueryBuilderForRenner($renner)
    {
        $qb = $this->createQueryBuilder("t");
        $qb->where('t.renner = ?1');
        $qb->setParameter('1', $renner);
        return $qb;
    }

    public function findInversionRenner($transfer)
    {
        $qb = $this->createQueryBuilder("t")->where("t != :transfer")->andWhere("t.identifier = :identifier");
        $qb->setParameters(array(":transfer" => $transfer, ":identifier" => $transfer->getIdentifier()));
        $res = $qb->getQuery()->getResult();
        return ( array_key_exists(0, $res) ) ? $res[0]->getRenner() : null;
    }

    public function getTransferCountForUserTransfer($ploeg, $start, $end)
    {
        return $this->getTransferCountByType($ploeg, $start, $end, Transfer::USERTRANSFER);
    }

    private function getTransferCountByType($ploeg, $start, $end, $type)
    {
        $query = $this->getEntityManager()
            ->createQuery("SELECT COUNT(t.id) AS freq FROM CyclearGameBundle:Transfer t 
                WHERE t.ploegNaar = :ploeg AND t.datum BETWEEN :start AND :end AND t.transferType = :type")
            ->setParameters(array("type" => $type, "ploeg" => $ploeg, "start" => $start, "end" => $end));
        $res = $query->getSingleResult();
        return (int) $res['freq'];
    }

    public function findLastTransferForDate($renner, \DateTime $date)
    {
        $cloneDate = clone $date;
        $cloneDate->setTime("23", "59", "59");
        $qb = $this->createQueryBuilder("t")->where("t.renner = :renner")->andWhere("t.datum <= :datum")->
                setParameters(array("renner" => $renner, "datum" => $cloneDate))->orderBy("t.datum", "DESC")->setMaxResults(1);
        $res = $qb->getQuery()->getResult();
        if (count($res) == 0) {
            return null;
        }
        return $res[0];

        $rsm = new \Doctrine\ORM\Query\ResultSetMapping();
        $rsm->addEntityResult('Cyclear\GameBundle\Entity\Transfer', 't');
        $rsm->addFieldResult('t', 'transferid', 'id');
        $rsm->addFieldResult('t', 'transferdatum', 'datum');
        //$rsm->addFieldResult('t', 'renner', 'renner');
        //$rsm->addFieldResult('t', 'ploegvan', 'ploegVan');
        //$rsm->addFieldResult('t', 'ploegnaar', 'ploegNaar');
        $cloneDate = clone $date;
        $cloneDate->setTime("23", "59", "59");
        $query = $this->getEntityManager()->createNativeQuery("SELECT 
                    t.id AS transferid, 
                    t.datum AS transferdatum,
                    t.renner_id AS renner,
                    t.ploegvan_id AS ploegvan,
                    t.ploegnaar_id AS ploegnaar
                    FROM transfer t
                LEFT JOIN renner r ON t.renner_id = r.id 
                LEFT JOIN ploeg p ON ploegnaar_id = p.id
                WHERE t.renner_id = :rennerid AND t.datum < :datum
                ORDER BY t.datum DESC LIMIT 1", $rsm)->setParameters(array('rennerid' => $renner->getId(), 'datum' => $cloneDate));
        $result = $query->getResult();
        if (count($result) == 0) {
            return null;
        }
        return $this->find($result[0]->getId());
    }
}
?>
