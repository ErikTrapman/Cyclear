<?php

/*
 * This file is part of the Cyclear-game package.
 *
 * (c) Erik Trapman <veggatron@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cyclear\GameBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RennerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransferRepository extends EntityRepository
{

    public function findByRenner(Renner $renner, $seizoen = null, $types = array())
    {
        if (null === $seizoen) {
            $seizoen = $this->_em->getRepository("CyclearGameBundle:Seizoen")->getCurrent();
        }

        $qb = $this->getQueryBuilderForRenner($renner, $seizoen);
        $qb->andWhere('t.seizoen = ?2');
        $qb->setParameter("2", $seizoen);
        $qb->orderBy('t.datum DESC, t.id', 'DESC');
        if (!empty($types)) {
            $qb->andWhere('t.transferType IN ( :types )')->setParameter('types', $types);
        }
        return $qb->getQuery()->getResult();
    }

    public function findLastByRenner(Renner $renner)
    {
        $qb = $this->getQueryBuilderForRenner($renner);
        $qb->orderBy('t.id', 'DESC');
        $qb->setMaxResults(1);
        $res = $qb->getQuery()->getResult();
        return (array_key_exists(0, $res)) ? $res[0] : null;
    }

    private function getQueryBuilderForRenner($renner)
    {
        $qb = $this->createQueryBuilder("t");
        $qb->where('t.renner = ?1');
        $qb->setParameter('1', $renner);
        return $qb;
    }

    // TODO: teveel argumenten. maak losse methoden!
    public function getLatest($seizoen = null, $types = array(), $limit = 20, $ploegNaar = null, $renner = null)
    {
        if (null === $seizoen) {
            $seizoen = $this->_em->getRepository("CyclearGameBundle:Seizoen")->getCurrent();
        }
        $qb = $this
            ->createQueryBuilder('t')
            ->where('t.ploegNaar IS NOT NULL')
            ->andWhere('t.seizoen = :seizoen')
            ->setParameters(array('seizoen' => $seizoen))
            ->setMaxResults($limit)
            ->orderBy('t.datum', 'DESC');
        if (null !== $ploegNaar) {
            $qb->andWhere('t.ploegNaar = :ploegNaar')->setParameter('ploegNaar', $ploegNaar);
        }
        if (null !== $renner) {
            $qb->andWhere('t.renner = :renner')->setParameter('renner', $renner);
        }
        if (!empty($types)) {
            $qb->andWhere('t.transferType IN ( :types )')->setParameter('types', $types);
        }
        return $qb->getQuery()->getResult(\Doctrine\ORM\AbstractQuery::HYDRATE_OBJECT);
    }

    public function getTransferCountForUserTransfer($ploeg, $start, $end)
    {
        return $this->getTransferCountByType($ploeg, $start, $end, array(Transfer::USERTRANSFER, Transfer::ADMINTRANSFER));
    }

    public function getTransferCountByType($ploeg, $start, $end, $type)
    {
        if (!is_array($type)) {
            $type = array($type);
        }
        if (is_numeric($ploeg)) {
            $ploeg = $this->_em->getRepository("CyclearGameBundle:Ploeg")->find($ploeg);
        }
        $cloneEnd = clone $end;
        $cloneEnd->setTime(23,59,59);
        $cloneStart = clone $start;
        $cloneStart->setTime(0,0,0);
        $query = $this->getEntityManager()
            ->createQuery("SELECT COUNT(t.id) AS freq FROM CyclearGameBundle:Transfer t 
                WHERE t.ploegNaar = :ploeg AND t.datum BETWEEN :start AND :end AND t.transferType IN( :type )")
            ->setParameters(array("type" => $type, "ploeg" => $ploeg, "start" => $cloneStart, "end" => $cloneEnd));
        $res = $query->getSingleResult();
        return (int)$res['freq'];
    }

    public function findLastTransferForDate($renner, \DateTime $date, $seizoen)
    {
        $cloneDate = clone $date;
        $cloneDate->setTime("23", "59", "59");
        $params = array("renner" => $renner, "datum" => $cloneDate, 'seizoen' => $seizoen);
        $qb = $this->createQueryBuilder("t")
            ->where("t.renner = :renner")
            ->andWhere("t.datum <= :datum")->andWhere('t.seizoen = :seizoen')->
            setParameters($params)->orderBy("t.datum", "DESC")->setMaxResults(1);
        $res = $qb->getQuery()->getResult();
        if (count($res) == 0) {
            return null;
        }
        return $res[0];
    }

    /**
     *
     * @param type $ploeg
     * @param type $seizoen
     * @param array $transferTypes
     */
    public function getTransferredInNonDraftRenners($ploeg, $seizoen = null)
    {
        if (null === $seizoen) {
            $seizoen = $this->_em->getRepository("CyclearGameBundle:Seizoen")->getCurrent();
        }
        /** @var \Doctrine\ORM\QueryBuilder $tQb */
        $tQb = $this->_em->getRepository("CyclearGameBundle:Transfer")->createQueryBuilder('t');

        $draftrenners = $this->_em->getRepository("CyclearGameBundle:Ploeg")->getDraftRenners($ploeg, $seizoen);
        $params = array(
            'drafttransfer' => Transfer::DRAFTTRANSFER,
            'ploeg' => $ploeg,
            'seizoen' => $seizoen,
            'draftrenners' => $draftrenners);
        $qb2 = $this->_em->getRepository("CyclearGameBundle:Transfer")
            ->createQueryBuilder('t2')
            ->where('t2.transferType = :drafttransfer')
            ->andWhere('t2.ploegNaar = :ploeg')
            ->andWhere('t2.seizoen = :seizoen')
            ->orWhere('t2.renner IN (:draftrenners)')
            ->setParameters($params);

        $tQb
            ->where("t.transferType != :drafttransfer")
            ->andWhere('t.ploegNaar = :ploeg')
            ->andWhere('t.seizoen = :seizoen')
            ->andWhere($tQb->expr()->notIn('t', $qb2->getDql()))
            ->setParameters($params);;
        return $tQb->getQuery()->getResult();
    }


}